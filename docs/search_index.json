[
["index.html", "A Guide to R for Fisheries Managers 1 Overview", " A Guide to R for Fisheries Managers Sustainable Fisheries Group 2017-05-08 1 Overview R is a free programming language/software environment that allows users to analyze, model, and vizualize large data sets in much more powerful and complex ways than traditional spreadsheet programs like Excel or Google Sheets. Best of all, R is open source, meaning that it is freely available from the Comprehensive R Archive Network (CRAN) and anyone can contribute to making R better. In fact, numerous R packages (more on these later) are specifically designed for conducting analyses related to fisheries management. RStudio is the powerful graphical interface that allows users to manage their code, data, and files all in one convenient program. library(tidyverse) library(lubridate) library(knitr) "],
["installation.html", "2 Installation 2.1 R 2.2 RStudio 2.3 Getting Started with RStudio 2.4 Helpful Resources", " 2 Installation Though R/RStudio may seem intimidating, it is actually quite straight forward to set up and, after learning a few basics, you can start running analyses and writing your own in no time. The objective of this guide is to provide an introduction to R/RStudio basics so that interested resource managers without programming experience can start leveraging R for their management decisions. R and RStudio are separate programs and that need to be installed and updated individually. If you do not keep both relatively up-to-date you will likely run into problems. 2.1 R To install R, go to the list of CRAN mirrors (universities and other organizations where you can download R from) and click on a link for a location near you. A few options are listed below. Indonesia Philippines Brazil US (West Coast) US (East Coast) After navigating to the CRAN mirror site, click the download button for your operating system of choice (Linux, Max OS X, Windows) and then click on the most recent .pkg file and follow the instructions to complete the installation process. 2.2 RStudio After installing R, visit the RStudio Products site and click the DOWNLOAD RSTUDIO DESKTOP button located partway down the page. Next, scroll to the bottom and click on the link under Installers that again corresponds to your operating system of choice. Save the .dmg file on your desktop, open the file after it finishes downloading, and follow the instructions to complete the installation process. You can then delete the .dmg file. Congratulations! You successfully completed the installation process and are one step closer to using R and RStudio for analysis! 2.3 Getting Started with RStudio 2.3.1 Packages Packages are groups of functions that are designed to excel at certain tasks (making plots, standardizing dates, reading/writing large data files, etc.). Many useful packages come standard with R when you download it, however, many more are available online. To install a new package, click on the “Install” button located under the “Packages” tab in RStudio. This will open a pop-up where you can search for and install R packages hosted on CRAN. Alternatively, if you know the name of the package you want to install, you can run install.packages('package_name'). Once installed, the packages you need for an analysis are loaded by the library('package_name') function. The following packages are commonly used by UCSB for fisheries analyses: tidyverse - The tidyverse package actually contains numerous seperate packages for loading and writing data files (readr), data processing (dplyr &amp; tidyr), plotting (ggplot2), and functional programming (purrr) readxl - read and write data from/to Excel workbooks, including workbooks with multiple worksheets sf, rgeos, rgdal - Key packages for spatial analyses similar to those done with ArcGIS rmarkdown - Use R code to author reproducible reports, presentations, and websites shiny - Create web applications using R 2.4 Helpful Resources Installing R and RStudio by Jenny Bryan "],
["loading-packages.html", "3 Loading packages", " 3 Loading packages The first step in any analysis is the load the packages you will need for your analysis. Loading packages allows you to use powerful functions not included in “base” R. For this analysis, you will use the tidyverse package, which actually loads a group of useful packages including tidyr, dplyr, readr, and ggplot2. tidyr and dplyr are very handy packages for manipulating data, readr is great for loading in data such as csv files, while ggplot2 is one of the best packages from plotting data. lubridate is another very handy package for dealing with dates and times. library(tidyverse) library(lubridate) "],
["loading-fisheries-data.html", "4 Loading Fisheries Data", " 4 Loading Fisheries Data Next, you’ll load the data you’ll be using for the analysis using the read_csv function. First load the landings data which includes catch, effort, and length measurements. The data are stored as a csv under a “data” folder. Store these data to a data frame called landings_data. Next, load the life history parameter data file. These data are also stored as a csv under a “data” folder. Store these data to a data frame called life_history_parameters. As data are loaded in, you’ll see that R automatically determines what type of variable each column represents - integers (for numbers), characters (for words), etc. landings_data &lt;- read_csv(&quot;_data/sample_landings_data.csv&quot;) life_history_parameters &lt;- read_csv(&quot;_data/life_history_parameters.csv&quot;) Let’s take a quick look at what’s in each of these data frames. We can use the head function to get a quick summary. head(landings_data) ## # A tibble: 6 × 8 ## Year Date Trip_ID Effort_Hours Gear Species Length_cm ## &lt;int&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 2003 4/30/03 1 10 Trap Caesio cuning 36 ## 2 2003 4/30/03 1 10 Trap Caesio cuning 29 ## 3 2003 4/30/03 1 10 Trap Caesio cuning 34 ## 4 2003 4/30/03 1 10 Trap Caesio cuning 36 ## 5 2003 4/30/03 1 10 Trap Caesio cuning 34 ## 6 2003 4/30/03 1 10 Trap Caesio cuning 28 ## # ... with 1 more variables: Weight_g &lt;dbl&gt; The landings_data data frame is from a fishery-dependent landing site survey. The species included in this data set is Caesio cuning, a yellowtail fusilier. The survey is conducted every few days at a major landing site, and thus is just a sub-sample of the total catch. However, it is conducted throughout the year and during each season, and at the largest landings site with fishers using several different gear types and fishing throughout the entire species range, so it is fairly representative of the total catch. You can see the data frame has eight columns, with each row being an individual fish catch measurement. The columns include the year and date when the measurement was collected, the fishing trip ID, how many hours were fished for each trip, what gear was used, the species, the length of the fish, and the weight of the fish. We’ll be able to use these data to create length-frequency histograms that describe the size structure of the population, as well as trends in catch and CPUE. One thing we should do is format the year and date columns to ensure that R knows these represent years and dates as we humans think of them. We can use the mdy and year functions from the lubridate package to do this. ## Start with the landings data frame landings_data &lt;- landings_data %&gt;% ## Turn the date column into a date format that R recognizes mutate(Date = mdy(Date)) %&gt;% ## Create a year column using a year format R recognizes mutate(Year = year(Date)) Let’s next look at the life_history_parameters data frame. head(life_history_parameters) ## # A tibble: 1 × 11 ## Species Common L_inf k t0 M Wa ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Caesio cuning Yellowtail fusilier 62.2 0.32 -0.42 0.8915981 0.0208 ## # ... with 4 more variables: Wb &lt;dbl&gt;, m50 &lt;dbl&gt;, m95 &lt;dbl&gt;, maxAge &lt;int&gt; The life_history_parameters data frame includes several important life history parameters that were found doing a literature review of this species. L_infinity, k, and t0 describe the age-to-length relationship using the von Bertalanffy growth equation. M represents natural mortality. Wa and Wb describe the length-to-weight relationship. m50 and m95 describe the lengths at which 50% and 95% of the fish are mature, respecitvely. maxAge is the maximum age of the fish. "],
["basic-fisheries-statistics.html", "5 Basic Fisheries Statistics 5.1 Calculating landings 5.2 Calculating Catch-per-Unit-Effort (CPUE) 5.3 Calculating percent mature", " 5 Basic Fisheries Statistics This short document will walk you through how to calculate some basic fisheries statistics This is a very quick introduction, but a great resource for learning more is a free book called R for Data Science. Additionally, you can always use R’s built in help functionality by using a question mark followed by a function name. For example, typing ?ggplot into the console will bring up a help document on ggplot. 5.1 Calculating landings One of the first analyses you may be interested in is calculating annual landings in the fishery. To do this in R, you start by taking the landings data and working through a series of “pipes”, which progressively analyze the data from one step to the next and are shown with the %&gt;% operation. Essentially, the output of one line is fed into the input of the next line. In all of the code below, there are also some helpful comments to tell you what each line is doing. Comments start with the # operation, and are not evaluated by R - they are simply there to document the code. To calcualte annual landings, take your landings_data data frame, group the data by year, and then summarize the data for each year by summing the total weight of all fish caught in each year. While summarizing the annual data, you can also convert from grams to kilograms to grabs. Also, because this particular survey only samples the catch on certain days, it does not represent the total volume of landed catch. Therefore, it’s important to not only sum the amount of catch each year, but also normalize the sampled catch by the number of sampling days. This will mean that trends represent actual increases or decreases in catch, not just increases or decreases in how frequently the catch is sampled. ## Start with the landings data frame annual_landings &lt;- landings_data %&gt;% ## First, group the data by year group_by(Year) %&gt;% ## Next, summarize the total annual landings per year. Also convert from grams to kilograms by dividing by 1000. Also, normalize the annual catch by the number of survey days each year. summarize(Annual_Landings_kg_sampling_day = sum(Weight_g,na.rm=TRUE)/1000/n_distinct(Date)) ## Display a table of the annual landings data annual_landings ## # A tibble: 9 × 2 ## Year Annual_Landings_kg_sampling_day ## &lt;dbl&gt; &lt;dbl&gt; ## 1 2003 7.5863749 ## 2 2004 8.6999112 ## 3 2005 6.5296765 ## 4 2006 5.3027336 ## 5 2010 0.7894718 ## 6 2011 1.0963514 ## 7 2012 0.8058094 ## 8 2013 4.1994209 ## 9 2014 19.0824869 You may be interested in looking at landings across different gear types. Here, we now group the data frame by both the year and the gear type in order to summarize the total landings by year and by gear. ## Start with the landings data frame annual_gear_landings &lt;- landings_data %&gt;% ## First, group the data by year group_by(Year,Gear) %&gt;% # Next, summarize the total annual landings per year. Also convert from grams to kilograms by dividing by 1000. Also, normalize the annual catch by the number of survey days each year. summarize(Annual_Landings_kg_sampling_day = sum(Weight_g,na.rm=TRUE)/1000/n_distinct(Date)) ## Display a table of the annual landings data by gear type annual_gear_landings ## Source: local data frame [39 x 3] ## Groups: Year [?] ## ## Year Gear Annual_Landings_kg_sampling_day ## &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 2003 Gillnet 1.916200 ## 2 2003 Handline 1.062857 ## 3 2003 Muroami 9.915162 ## 4 2003 Trap 3.325739 ## 5 2004 Gillnet 1.396434 ## 6 2004 Handline 3.037152 ## 7 2004 Muroami 7.568703 ## 8 2004 Speargun 4.738203 ## 9 2004 Trap 4.571908 ## 10 2004 Trolling 1.462182 ## # ... with 29 more rows 5.2 Calculating Catch-per-Unit-Effort (CPUE) You may also be interested in calculating catch-per-unit-effort (CPUE). CPUE is calculated by dividing the catch of each fishing trip by the number of hours fished during that trip. This gives CPUE in units of kilograms per hour. The median is taken in order to remove outliers - some fishers are much more efficient than others. ## Start with the landings data frame cpue_data &lt;- landings_data %&gt;% ## Group by year and Trip ID so that you can calculate CPUE for every trip in every year group_by(Year,Trip_ID) %&gt;% ## For each year and trip ID, calculate the CPUE for each trip by dividing the sum of the catch, converted from grams to kilograms, by the trip by the number of fishing hours summarize(Trip_CPUE = sum(Weight_g/1000) / mean(Effort_Hours)) %&gt;% ## Next, just group by year so we can calculate median CPUE for each year across all trips in the year group_by(Year) %&gt;% ## Calculate median CPUE for each year summarize(Median_CPUE_kg_hour = median(Trip_CPUE)) cpue_data ## # A tibble: 9 × 2 ## Year Median_CPUE_kg_hour ## &lt;dbl&gt; &lt;dbl&gt; ## 1 2003 0.31834277 ## 2 2004 0.26070028 ## 3 2005 0.40145105 ## 4 2006 0.44029501 ## 5 2010 0.01742840 ## 6 2011 0.03123217 ## 7 2012 0.03123217 ## 8 2013 0.19638408 ## 9 2014 0.88216281 5.3 Calculating percent mature You may also wish to analyze your lengt data. An interesting analysis is to determine the percentage of mature fish in the catch in every year of the data frame. To do this, we add a column to the data frame that represents whether each fish is mature or not (represented by a 1 or 0), group the data frame by year, and then summarize for each year the percentage of mature fish out of the total number of sampled fish. To determine if a fish is mature or not, it is compared against m95, the length at which 95% of fish are mature. Over 90% of the fish are mature throughout the time series, which is a great sign! This matches up with what we see in the histogram. ## Start with the landings data frame landings_data %&gt;% ## Add a column to the data that indicates whether each length measurement is from a mature or immature fish. If it&#39;s mature, this value should be 1; if immature, 0. mutate(Mature = ifelse(Length_cm &gt; life_history_parameters$m95,1,0)) %&gt;% ## Group by year so we can see the percent mature for every year group_by(Year) %&gt;% ## The percentage mature is equal to the number of mature fish divided by the total number of fish and multiplied by 100 summarize(Percent_Mature = sum(Mature) / n() * 100) ## # A tibble: 9 × 2 ## Year Percent_Mature ## &lt;dbl&gt; &lt;dbl&gt; ## 1 2003 98.57595 ## 2 2004 98.62306 ## 3 2005 97.73371 ## 4 2006 100.00000 ## 5 2010 91.80556 ## 6 2011 99.77629 ## 7 2012 99.65398 ## 8 2013 99.46164 ## 9 2014 99.55709 "],
["plotting-fisheries-data.html", "6 Plotting Fisheries Data 6.1 Plot landings data 6.2 Plot CPUE data 6.3 Plot length data", " 6 Plotting Fisheries Data This short document will walk you through how to make make some basic fisheries plots. Once you’ve analyzed the data as in the previous step to create summary statistics, you can take these data frames and feed them into ggplot. When using ggplot, start with your data frame, initialize the ggplot, and then use the + operation to add additional features to the plot. 6.1 Plot landings data Let’s plot a time series of annual landings data. We start with the annual landings data we made in the previous step, and then feed this into a ggplot. It appears landings were going down between 2004 and 2011, but have been increasing significantly since then. ## Start with the annual_landings data frame you created in the last step annual_landings %&gt;% ## Initialize a ggplot of annual landings versus year ggplot(aes(x=Year,y=Annual_Landings_kg_sampling_day)) + ## Tell ggplot that the plot type should be a scatter plot geom_point() + ## Also add a line connecting the points geom_line() + ## Change the y-axis title ylab(&quot;Normalized annual Landings [kg/survey day/year]&quot;) + ## Add figure title ggtitle(&quot;Normalized annual landings of Caesio cuning&quot;) Again, you may be interested in looking across different gear types. To plot, we use ggplot’s faceting functionality. Doing so, it now becomes clear that the recent increase in catch seems to be concentrated in speargun and trap fishing. Meanwhile, catch from muroami, a very destructive type of gear where nets are driven into the reef, has dropped to 0 since a ban of that gear in 2012 - a good sign that mangement regulation is working. ## Start with the landings data frame annual_gear_landings %&gt;% ## First, group the data by year group_by(Year,Gear) %&gt;% ## Initialize a ggplot of annual landings versus year ggplot(aes(x=Year,y=Annual_Landings_kg_sampling_day)) + ## Tell ggplot that the plot type should be a scatter plot geom_point() + ## Also add a line connecting the points geom_line() + ## Change the y-axis title ylab(&quot;Normalized annual Landings [kg/survey day/year]&quot;) + ## Add figure title ggtitle(&quot;Normalized annual landings of Caesio cuning&quot;) + ## This tells the figure to plot by all different gear types facet_wrap(~Gear) 6.2 Plot CPUE data You may also be interested in plotting median catch-per-unit-effort (CPUE). You take your CPUE data frame made in the last step and feed it into ggplot. CPUE appears to have increased significantly during the last years. This may be due to increasing abundance in the water, which would be a good thing, but may also be indicative of increased gear efficiency coinciding with the transition to traps and spearguns, which may be concerning. ## Start with the CPUE data frame cpue_data %&gt;% ## Initialize a ggplot of median CPUE versus year ggplot(aes(x=Year,y=Median_CPUE_kg_hour)) + ## Tell ggplot that the plot type should be a scatter plot geom_point() + ## Also add a line connecting the points geom_line() + ## Change the y-axis title ylab(&quot;Median CPUE [kg/hour]&quot;) + ## Add figure title ggtitle(&quot;Median CPUE for Caesio cuning&quot;) 6.3 Plot length data Finally, let’s first look at the length data from the catch, which gives an indication of the size structure and health of the population. Let’s look at the length data for 2014, which is the most recent year of data available. We first filter the data to be only from 2014. We then create a histogram of the length data, which shows how many individuals of each size class were measured in the catch. On the histogram, we’ll also a vertical line to show the length at which fish mature to get a sense of how sustainable the catch is - the catch should be composed mostly of mature fish. This information comes from the life history parameter data input file. ## Start with the landings data frame landings_data %&gt;% ## Filter data to only look at length measurements from 2014 filter(Year == 2014) %&gt;% ## Initialize ggplot of data using the length column ggplot(aes(Length_cm)) + ## Tell ggplot that the plot type should be a histogram geom_histogram() + ## Change x-axis label xlab(&quot;Length [cm]&quot;) + ## Add figure title ggtitle(&quot;Length histogram of Caesio cuning in the catch\\nLength at 95% maturity shown as a red line.&quot;) + ## Add a red vertical line for m95, the length at which 95% of fish are mature. Any fish below this length may be immature. Use the life_history_parameter data frame to get this value. geom_vline(aes(xintercept=life_history_parameters$m95),color=&quot;red&quot;) You might also be interested in seeing how the size composition varies by gear type. You can recreate the figure about, but separting the histograms out by gear type using ggplot’s “facet” functionality. It appears as if the size structure is about the same from each gear, although by far the most amount of fish are caught using speargun. Very few fish are caught using trolling. ## Start with the landings data frame landings_data %&gt;% ## Filter data to only look at length measurements from 2014 filter(Year == 2014) %&gt;% ## Initialize ggplot of data using the length column ggplot(aes(Length_cm)) + ## Tell ggplot that the plot type should be a histogram geom_histogram() + ## Change x-axis label xlab(&quot;Length [cm]&quot;) + ## Add figure title ggtitle(&quot;Length histogram of Caesio cuning in the catch by gear type\\nLength at 95% maturity shown as a red line.&quot;) + ## Add a red line form95, the length at which 95% of fish are mature. Any fish below this length may be immature. Use the life_history_parameter data frame to get this value. geom_vline(aes(xintercept=life_history_parameters$m95),color=&quot;red&quot;) + ## This tells the figure to plot by all different gear types, known as facetting facet_wrap(~Gear) Looking at these plots - generally increasing catch, CPUE, and a healthy size structure - indicates that the population is likely doing fairly well, and is may be recovering since the ban of muroami fishing gear in 2012. "]
]
